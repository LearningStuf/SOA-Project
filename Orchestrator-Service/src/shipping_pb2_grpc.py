# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import shipping_pb2 as shipping__pb2


class ShippingStub(object):
    """The shipping service.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CalculateShippingCost = channel.unary_unary(
                '/shipping.Shipping/CalculateShippingCost',
                request_serializer=shipping__pb2.EstimateShipmentCost.SerializeToString,
                response_deserializer=shipping__pb2.EstimateShipmentCostResponse.FromString,
                )
        self.CalculateShippingCostNoCourier = channel.unary_unary(
                '/shipping.Shipping/CalculateShippingCostNoCourier',
                request_serializer=shipping__pb2.EstimateShipmentCostNoCourier.SerializeToString,
                response_deserializer=shipping__pb2.EstimateShipmentCostResponse.FromString,
                )
        self.CreatePackage = channel.unary_unary(
                '/shipping.Shipping/CreatePackage',
                request_serializer=shipping__pb2.RequestCreatePackage.SerializeToString,
                response_deserializer=shipping__pb2.Package.FromString,
                )
        self.StartShipping = channel.unary_unary(
                '/shipping.Shipping/StartShipping',
                request_serializer=shipping__pb2.ShippingRequest.SerializeToString,
                response_deserializer=shipping__pb2.Shipment.FromString,
                )
        self.TrackShipment = channel.unary_unary(
                '/shipping.Shipping/TrackShipment',
                request_serializer=shipping__pb2.ShipmentTrackRequest.SerializeToString,
                response_deserializer=shipping__pb2.Shipment.FromString,
                )
        self.DeliverShipment = channel.unary_unary(
                '/shipping.Shipping/DeliverShipment',
                request_serializer=shipping__pb2.ShipmentUpdateRequest.SerializeToString,
                response_deserializer=shipping__pb2.Shipment.FromString,
                )
        self.UpdateShipmentStatus = channel.unary_unary(
                '/shipping.Shipping/UpdateShipmentStatus',
                request_serializer=shipping__pb2.ShipmentUpdateRequest.SerializeToString,
                response_deserializer=shipping__pb2.Shipment.FromString,
                )
        self.GetAllCouriers = channel.unary_unary(
                '/shipping.Shipping/GetAllCouriers',
                request_serializer=shipping__pb2.CourierListRequest.SerializeToString,
                response_deserializer=shipping__pb2.CourierListResponse.FromString,
                )
        self.GetShipmentInformation = channel.unary_unary(
                '/shipping.Shipping/GetShipmentInformation',
                request_serializer=shipping__pb2.ShipmentTrackRequest.SerializeToString,
                response_deserializer=shipping__pb2.Shipment.FromString,
                )
        self.GetAllShipments = channel.unary_unary(
                '/shipping.Shipping/GetAllShipments',
                request_serializer=shipping__pb2.GetAllShipmentsRequest.SerializeToString,
                response_deserializer=shipping__pb2.AllShipmentsResponse.FromString,
                )


class ShippingServicer(object):
    """The shipping service.
    """

    def CalculateShippingCost(self, request, context):
        """calculates the cost of a shipment
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CalculateShippingCostNoCourier(self, request, context):
        """calculates the cost of a shipment for no particular courier
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreatePackage(self, request, context):
        """creates a package from a list of items, since the client may not be able to create packages
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartShipping(self, request, context):
        """starts a shipment based on the hsipment request
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TrackShipment(self, request, context):
        """gets an immediate update (live tracking) for a shipment and returns a new shipment update (It stores the shipment update in the database)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeliverShipment(self, request, context):
        """deliver a particular shipment
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateShipmentStatus(self, request, context):
        """manualy update shipment status either from teh api or the cli
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllCouriers(self, request, context):
        """get the list of all supported couriers
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetShipmentInformation(self, request, context):
        """get shipment information
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllShipments(self, request, context):
        """get all shipments based on filter
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ShippingServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CalculateShippingCost': grpc.unary_unary_rpc_method_handler(
                    servicer.CalculateShippingCost,
                    request_deserializer=shipping__pb2.EstimateShipmentCost.FromString,
                    response_serializer=shipping__pb2.EstimateShipmentCostResponse.SerializeToString,
            ),
            'CalculateShippingCostNoCourier': grpc.unary_unary_rpc_method_handler(
                    servicer.CalculateShippingCostNoCourier,
                    request_deserializer=shipping__pb2.EstimateShipmentCostNoCourier.FromString,
                    response_serializer=shipping__pb2.EstimateShipmentCostResponse.SerializeToString,
            ),
            'CreatePackage': grpc.unary_unary_rpc_method_handler(
                    servicer.CreatePackage,
                    request_deserializer=shipping__pb2.RequestCreatePackage.FromString,
                    response_serializer=shipping__pb2.Package.SerializeToString,
            ),
            'StartShipping': grpc.unary_unary_rpc_method_handler(
                    servicer.StartShipping,
                    request_deserializer=shipping__pb2.ShippingRequest.FromString,
                    response_serializer=shipping__pb2.Shipment.SerializeToString,
            ),
            'TrackShipment': grpc.unary_unary_rpc_method_handler(
                    servicer.TrackShipment,
                    request_deserializer=shipping__pb2.ShipmentTrackRequest.FromString,
                    response_serializer=shipping__pb2.Shipment.SerializeToString,
            ),
            'DeliverShipment': grpc.unary_unary_rpc_method_handler(
                    servicer.DeliverShipment,
                    request_deserializer=shipping__pb2.ShipmentUpdateRequest.FromString,
                    response_serializer=shipping__pb2.Shipment.SerializeToString,
            ),
            'UpdateShipmentStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateShipmentStatus,
                    request_deserializer=shipping__pb2.ShipmentUpdateRequest.FromString,
                    response_serializer=shipping__pb2.Shipment.SerializeToString,
            ),
            'GetAllCouriers': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllCouriers,
                    request_deserializer=shipping__pb2.CourierListRequest.FromString,
                    response_serializer=shipping__pb2.CourierListResponse.SerializeToString,
            ),
            'GetShipmentInformation': grpc.unary_unary_rpc_method_handler(
                    servicer.GetShipmentInformation,
                    request_deserializer=shipping__pb2.ShipmentTrackRequest.FromString,
                    response_serializer=shipping__pb2.Shipment.SerializeToString,
            ),
            'GetAllShipments': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllShipments,
                    request_deserializer=shipping__pb2.GetAllShipmentsRequest.FromString,
                    response_serializer=shipping__pb2.AllShipmentsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'shipping.Shipping', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Shipping(object):
    """The shipping service.
    """

    @staticmethod
    def CalculateShippingCost(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/shipping.Shipping/CalculateShippingCost',
            shipping__pb2.EstimateShipmentCost.SerializeToString,
            shipping__pb2.EstimateShipmentCostResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CalculateShippingCostNoCourier(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/shipping.Shipping/CalculateShippingCostNoCourier',
            shipping__pb2.EstimateShipmentCostNoCourier.SerializeToString,
            shipping__pb2.EstimateShipmentCostResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreatePackage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/shipping.Shipping/CreatePackage',
            shipping__pb2.RequestCreatePackage.SerializeToString,
            shipping__pb2.Package.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartShipping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/shipping.Shipping/StartShipping',
            shipping__pb2.ShippingRequest.SerializeToString,
            shipping__pb2.Shipment.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TrackShipment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/shipping.Shipping/TrackShipment',
            shipping__pb2.ShipmentTrackRequest.SerializeToString,
            shipping__pb2.Shipment.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeliverShipment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/shipping.Shipping/DeliverShipment',
            shipping__pb2.ShipmentUpdateRequest.SerializeToString,
            shipping__pb2.Shipment.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateShipmentStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/shipping.Shipping/UpdateShipmentStatus',
            shipping__pb2.ShipmentUpdateRequest.SerializeToString,
            shipping__pb2.Shipment.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAllCouriers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/shipping.Shipping/GetAllCouriers',
            shipping__pb2.CourierListRequest.SerializeToString,
            shipping__pb2.CourierListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetShipmentInformation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/shipping.Shipping/GetShipmentInformation',
            shipping__pb2.ShipmentTrackRequest.SerializeToString,
            shipping__pb2.Shipment.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAllShipments(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/shipping.Shipping/GetAllShipments',
            shipping__pb2.GetAllShipmentsRequest.SerializeToString,
            shipping__pb2.AllShipmentsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
